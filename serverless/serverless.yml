# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: 
  name: securecanlogger
  awsKmsKeyArn: arn:aws:kms:us-east-2:096696900030:key/161b7817-f9b5-444a-87dc-a4d5943f7c1e

# app and org for use with dashboard.serverless.com
# app: secure-CAN-logger
# org: csu-systems

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: python3.7
  profile: csu
  stage: dev
  region: us-east-2
  apiKeys:
    - CANLoggerAPIKey 
  usagePlan:
    quota:
      limit: 500
      offset: 2
      period: MONTH
    throttle:
      burstLimit: 20
      rateLimit: 10

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**

functions:
  hello:
    handler: handler.hello
    events:
      - http:
          path: hello
          method: get
          private: true
  auth:
    handler: auth.auth
    awsKmsKeyArn: arn:aws:kms:us-east-2:096696900030:key/161b7817-f9b5-444a-87dc-a4d5943f7c1e
    events:
      - http:
          path: auth
          method: post
          private: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer  
  upload:
    handler: handler.upload
    events:
      - http:
          path: upload
          method: post
          private: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer        
  provision:
    handler: provision.provision  
    events:
      - http:
          path: provision
          method: post
          private: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  list:
    handler: list_files.list_files  
    events:
      - http:
          path: list
          method: get
          private: false
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  verify_upload:
    handler: handler.verify_upload
    events:
      - http:
          path: verify_upload
          method: post
          private: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  download:
    handler: download.download
    events:
      - http:
          path: download
          method: post
          private: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  share:
    handler: share.share
    events:
      - http:
          path: share
          method: post
          private: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  
# you can add CloudFormation resource templates here
resources:
  Resources:
    CognitoUserPool:
      Type: "AWS::Cognito::UserPool"
      Properties:
        MfaConfiguration: OFF
        UserPoolName: CANLoggerUsers
        UsernameAttributes:
          - email
          - phone_number
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: True
            RequireNumbers: True
            RequireSymbols: True
            RequireUppercase: True
    CognitoUserPoolClient:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
        ClientName: CANLoggerUsersClient
        GenerateSecret: False
        UserPoolId:
          Ref: CognitoUserPool
    ApiGatewayAuthorizer:
      DependsOn:
        - ApiGatewayRestApi
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: cognito-authorizer
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - Fn::GetAtt: [CognitoUserPool, Arn]
    LogFileBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: can-log-files
    logfileDB:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: CanLoggerMetaData
        AttributeDefinitions:
          - AttributeName: digest
            AttributeType: S
          - AttributeName: uploader
            AttributeType: S
        KeySchema:
          - AttributeName: digest
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: email_index
            KeySchema:
              - AttributeName: uploader
                KeyType: HASH
            Projection:
              ProjectionType: ALL
    deviceDB:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: CANLoggers
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
  Outputs:
    CognitoUserPoolArn:
      Value:
        Fn::GetAtt:
          - CognitoUserPool
          - Arn
      Export:
        Name: CognitoUserPoolArn
plugins:
  - serverless-python-requirements
custom:
  pythonRequirements:
    zip: false
    slim: false
